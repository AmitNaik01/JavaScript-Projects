#include <stdio.h>
#define MAX 20
#include<stdlib.h>
int queue_array[MAX];
int rear = - 1;
int front = - 1;
void insert()
{
      int add_item;
      if (rear == MAX - 1)
            printf("Queue Overflow \n");
      else
      {
            if (front == - 1)
                  /*If queue is initially empty */
                  front = 0;
            printf("\nEnter element : ");
            scanf("%d", &add_item);
            printf("\n%d is inserted in queue\n",add_item);
            printf("------------------------------\n");
            rear = rear + 1;
            queue_array[rear] = add_item;
      }
}
void delete()
{
      if (front == - 1 || front > rear)
      {
            printf("Queue Underflow \n");
            return ;
      }
      else
      {
            printf("\nElement deleted from queue is : %d\n", queue_array[front]);
            printf("------------------------------\n");
            front = front + 1;
      }
}
void display()
{
      int i;
      if (front == - 1)
            printf("Queue is empty \n");
      else
      {
            printf("\nQueue is : ");
            for (i = front; i <= rear; i++)
                  printf("%d ", queue_array[i]);
            printf("\n------------------------------");
            printf("\n");
      }
}
int main()
{
      printf("Perform operations on queue\n");
      printf("------------------------------\n");
      printf("\tMenu");
      printf("\n------------------------------\n");
      printf("1. Insert element \n");
      printf("2. Delete element \n");
      printf("3. Display queue\n");
      printf("4. Exit\n");
      printf("------------------------------\n");
      int ch;
      while (1)
      {
            printf("Choose operation : ");
            scanf("%d", &ch);
            switch(ch)
            {
                  case 1:
                        insert();
                        break;
                  case 2:
                        delete();
                        break;
                  case 3:
                        display();
                        break;
                  case 4:
                        exit(1);
                  default:
                        printf("Invalid operation \n");
            }
      }
      return 0;
}




#include<stdio.h>
int stack[20];
int top = -1;

void push(int x)
{
    stack[++top] = x;

}

int pop()
{
    return stack[top--];
}

int main()
{
    char exp[20];
    char *e;
    int n1,n2,n3,num;
    printf("Enter the expression :: ");
    scanf("%s",exp);
    e = exp;
    while(*e != '\0')
    {
        if(isdigit(*e))
        {
            num = *e - 48;
            push(num);
        }
        else
        {
            n1 = pop();
            n2 = pop();
            switch(*e)
            {
            case '+':
            {
                n3 = n1 + n2;
                break;
            }
            case '-':
            {
                n3 = n2 - n1;
                break;
            }
            case '*':
            {
                n3 = n1 * n2;
                break;
            }
            case '/':
            {
                n3 = n2 / n1;
                break;
            }
            }
            push(n3);
        }
        e++;
    }
    printf("\n The result of expression %s  =  %d\n\n",pop());
    return 0;
}

#include<stdio.h>
#include<conio.h>

char stack[20];
int top = -1;

void push(char x)
{
    stack[++top]=x;
}

char pop()
{
    if(top == -1){
        return -1;
    }else{
        return stack[top--];
    }
}

int priority(char x)
{
    if(x=='('){
        return 0;
    }
    if(x=='+'|| x=='-'){
        return 1;
    }
    if(x=='*'|| x=='/'){
        return 2;
    }
    if(x=='^'){
        return 3;
    }

    return 0;
}

int main(){
    char exp[20];
    char *e,x;
    printf("Enter the Expression :");
    scanf("%s",exp);
    printf("\n");
    e=exp;
    while(*e!='\0'){
        if(isalnum(*e)){
            printf("%c",*e);
        }
        else if(*e=='('){
                    push(*e);
                }
                else if(*e==')'){
                    while((x=pop())!='('){
                            printf("%c",x);
                          }
                }
        else{
            while(priority(stack[top])>= priority(*e)){
                printf("%c",pop());
            }
            push(*e);
        }
        e++;
    }
    while(top!= -1){
        printf("%c",pop());
    }
return 0;
}
